// Copyright (C) 2005-2009 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "kmodel2-pimpl.hxx"

// LabelType_pimpl
//

LabelType_pimpl::
LabelType_pimpl ()
: LabelType_pskel (&base_impl_)
{
}

void LabelType_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->LabelType_pimpl_state_.LabelType_ = ::LabelType ();
}

void LabelType_pimpl::
id (unsigned int x)
{
  this->LabelType_pimpl_state_.LabelType_.id (x);
}

::LabelType LabelType_pimpl::
post_LabelType ()
{
  static_cast< ::std::string& > (this->LabelType_pimpl_state_.LabelType_) = 
  this->base_impl_.post_string ();
  return this->LabelType_pimpl_state_.LabelType_;
}

// Property_pimpl
//

Property_pimpl::
Property_pimpl ()
: Property_pskel (&base_impl_)
{
}

void Property_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->Property_pimpl_state_.Property_ = ::Property ();
}

void Property_pimpl::
key (const ::std::string& x)
{
  this->Property_pimpl_state_.Property_.key (x);
}

void Property_pimpl::
value (const ::std::string& x)
{
  this->Property_pimpl_state_.Property_.value (x);
}

::Property Property_pimpl::
post_Property ()
{
  static_cast< ::std::string& > (this->Property_pimpl_state_.Property_) = 
  this->base_impl_.post_string ();
  return this->Property_pimpl_state_.Property_;
}

// PropertyListType_pimpl
//

PropertyListType_pimpl::
PropertyListType_pimpl (bool b)
{
  this->PropertyListType_pimpl_base_ = b;
  this->PropertyListType_pimpl_state_.PropertyListType_ = 0;
}

PropertyListType_pimpl::
~PropertyListType_pimpl ()
{
  if (!this->PropertyListType_pimpl_base_)
    delete this->PropertyListType_pimpl_state_.PropertyListType_;
}

void PropertyListType_pimpl::
_reset ()
{
  PropertyListType_pskel::_reset ();

  if (!this->PropertyListType_pimpl_base_)
  {
    delete this->PropertyListType_pimpl_state_.PropertyListType_;
    this->PropertyListType_pimpl_state_.PropertyListType_ = 0;
  }
}

void PropertyListType_pimpl::
pre_impl (::PropertyListType* x)
{
  this->PropertyListType_pimpl_state_.PropertyListType_ = x;
}

void PropertyListType_pimpl::
pre ()
{
  this->pre_impl (new ::PropertyListType);
}

void PropertyListType_pimpl::
Property (const ::Property& x)
{
  this->PropertyListType_pimpl_state_.PropertyListType_->Property ().push_back (x);
}

::PropertyListType* PropertyListType_pimpl::
post_PropertyListType ()
{
  ::PropertyListType* r = this->PropertyListType_pimpl_state_.PropertyListType_;
  this->PropertyListType_pimpl_state_.PropertyListType_ = 0;
  return r;
}

// jProposalType_pimpl
//

jProposalType_pimpl::
jProposalType_pimpl (bool b)
{
  this->jProposalType_pimpl_base_ = b;
  this->jProposalType_pimpl_state_.jProposalType_ = 0;
}

jProposalType_pimpl::
~jProposalType_pimpl ()
{
  if (!this->jProposalType_pimpl_base_)
    delete this->jProposalType_pimpl_state_.jProposalType_;
}

void jProposalType_pimpl::
_reset ()
{
  jProposalType_pskel::_reset ();

  if (!this->jProposalType_pimpl_base_)
  {
    delete this->jProposalType_pimpl_state_.jProposalType_;
    this->jProposalType_pimpl_state_.jProposalType_ = 0;
  }
}

void jProposalType_pimpl::
pre_impl (::jProposalType* x)
{
  this->jProposalType_pimpl_state_.jProposalType_ = x;
}

void jProposalType_pimpl::
pre ()
{
  this->pre_impl (new ::jProposalType);
}

void jProposalType_pimpl::
mc (bool x)
{
  this->jProposalType_pimpl_state_.jProposalType_->mc (x);
}

void jProposalType_pimpl::
qname (const ::std::string& x)
{
  this->jProposalType_pimpl_state_.jProposalType_->qname (x);
}

void jProposalType_pimpl::
Label (const ::LabelType& x)
{
  this->jProposalType_pimpl_state_.jProposalType_->Label ().push_back (x);
}

::jProposalType* jProposalType_pimpl::
post_jProposalType ()
{
  ::jProposalType* r = this->jProposalType_pimpl_state_.jProposalType_;
  this->jProposalType_pimpl_state_.jProposalType_ = 0;
  return r;
}

// Image_pimpl
//

Image_pimpl::
Image_pimpl ()
: Image_pskel (&base_impl_)
{
}

void Image_pimpl::
pre ()
{
  this->base_impl_.pre ();
  this->Image_pimpl_state_.Image_ = ::Image ();
}

void Image_pimpl::
id (unsigned int x)
{
  this->Image_pimpl_state_.Image_.id (x);
}

void Image_pimpl::
uri (const ::std::string& x)
{
  this->Image_pimpl_state_.Image_.uri (x);
}

::Image Image_pimpl::
post_Image ()
{
  static_cast< ::std::string& > (this->Image_pimpl_state_.Image_) = 
  this->base_impl_.post_string ();
  return this->Image_pimpl_state_.Image_;
}

// ImageListType_pimpl
//

ImageListType_pimpl::
ImageListType_pimpl (bool b)
{
  this->ImageListType_pimpl_base_ = b;
  this->ImageListType_pimpl_state_.ImageListType_ = 0;
}

ImageListType_pimpl::
~ImageListType_pimpl ()
{
  if (!this->ImageListType_pimpl_base_)
    delete this->ImageListType_pimpl_state_.ImageListType_;
}

void ImageListType_pimpl::
_reset ()
{
  ImageListType_pskel::_reset ();

  if (!this->ImageListType_pimpl_base_)
  {
    delete this->ImageListType_pimpl_state_.ImageListType_;
    this->ImageListType_pimpl_state_.ImageListType_ = 0;
  }
}

void ImageListType_pimpl::
pre_impl (::ImageListType* x)
{
  this->ImageListType_pimpl_state_.ImageListType_ = x;
}

void ImageListType_pimpl::
pre ()
{
  this->pre_impl (new ::ImageListType);
}

void ImageListType_pimpl::
Image (const ::Image& x)
{
  this->ImageListType_pimpl_state_.ImageListType_->Image ().push_back (x);
}

::ImageListType* ImageListType_pimpl::
post_ImageListType ()
{
  ::ImageListType* r = this->ImageListType_pimpl_state_.ImageListType_;
  this->ImageListType_pimpl_state_.ImageListType_ = 0;
  return r;
}

// jGroupType_pimpl
//

jGroupType_pimpl::
jGroupType_pimpl (bool b)
{
  this->jGroupType_pimpl_base_ = b;
  this->jGroupType_pimpl_state_.jGroupType_ = 0;
}

jGroupType_pimpl::
~jGroupType_pimpl ()
{
  if (!this->jGroupType_pimpl_base_)
    delete this->jGroupType_pimpl_state_.jGroupType_;
}

void jGroupType_pimpl::
_reset ()
{
  jGroupType_pskel::_reset ();

  if (!this->jGroupType_pimpl_base_)
  {
    delete this->jGroupType_pimpl_state_.jGroupType_;
    this->jGroupType_pimpl_state_.jGroupType_ = 0;
  }
}

void jGroupType_pimpl::
pre_impl (::jGroupType* x)
{
  this->jGroupType_pimpl_state_.jGroupType_ = x;
}

void jGroupType_pimpl::
pre ()
{
  this->pre_impl (new ::jGroupType);
}

void jGroupType_pimpl::
id (unsigned int x)
{
  this->jGroupType_pimpl_state_.jGroupType_->id (x);
}

void jGroupType_pimpl::
name (const ::std::string& x)
{
  this->jGroupType_pimpl_state_.jGroupType_->name (x);
}

void jGroupType_pimpl::
PropertyList (::PropertyListType* x)
{
  this->jGroupType_pimpl_state_.jGroupType_->PropertyList (x);
}

void jGroupType_pimpl::
SourceList (::SourceList* x)
{
  this->jGroupType_pimpl_state_.jGroupType_->SourceList (x);
}

void jGroupType_pimpl::
Description (const ::std::string& x)
{
  this->jGroupType_pimpl_state_.jGroupType_->Description (x);
}

void jGroupType_pimpl::
ImageList (::ImageListType* x)
{
  this->jGroupType_pimpl_state_.jGroupType_->ImageList (x);
}

void jGroupType_pimpl::
Text (const ::std::string& x)
{
  this->jGroupType_pimpl_state_.jGroupType_->Text (x);
}

void jGroupType_pimpl::
Hint (const ::std::string& x)
{
  this->jGroupType_pimpl_state_.jGroupType_->Hint (x);
}

void jGroupType_pimpl::
jProposal (::jProposal* x)
{
  this->jGroupType_pimpl_state_.jGroupType_->jProposal (x);
}

void jGroupType_pimpl::
jProblemList (::jProblemList* x)
{
  this->jGroupType_pimpl_state_.jGroupType_->jProblemList (x);
}

::jGroupType* jGroupType_pimpl::
post_jGroupType ()
{
  ::jGroupType* r = this->jGroupType_pimpl_state_.jGroupType_;
  this->jGroupType_pimpl_state_.jGroupType_ = 0;
  return r;
}

// CategoryType_pimpl
//

CategoryType_pimpl::
CategoryType_pimpl (bool b)
: CategoryType_pimpl_state_ (sizeof (CategoryType_pimpl_state ), &CategoryType_pimpl_state_first_)
{
  this->CategoryType_pimpl_base_ = b;
}

CategoryType_pimpl::
~CategoryType_pimpl ()
{
  for (; !this->CategoryType_pimpl_state_.empty (); this->CategoryType_pimpl_state_.pop ())
  {
    if (!this->CategoryType_pimpl_base_)
      delete static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_;
  }
}

void CategoryType_pimpl::
_reset ()
{
  CategoryType_pskel::_reset ();

  for (; !this->CategoryType_pimpl_state_.empty (); this->CategoryType_pimpl_state_.pop ())
  {
    if (!this->CategoryType_pimpl_base_)
      delete static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_;
  }
}

void CategoryType_pimpl::
pre_impl (::CategoryType* x)
{
  this->CategoryType_pimpl_state_.push ();
  static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_ = x;
}

void CategoryType_pimpl::
pre ()
{
  this->pre_impl (new ::CategoryType);
}

void CategoryType_pimpl::
id (unsigned long x)
{
  static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_->id (x);
}

void CategoryType_pimpl::
name (const ::std::string& x)
{
  static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_->name (x);
}

void CategoryType_pimpl::
PropertyList (::PropertyListType* x)
{
  static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_->PropertyList (x);
}

void CategoryType_pimpl::
Description (const ::std::string& x)
{
  static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_->Description (x);
}

void CategoryType_pimpl::
Category (::CategoryType* x)
{
  static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_->Category ().push_back (x);
}

void CategoryType_pimpl::
jGroup (::jGroupType* x)
{
  static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_->jGroup ().push_back (x);
}

::CategoryType* CategoryType_pimpl::
post_CategoryType ()
{
  ::CategoryType* r = static_cast< CategoryType_pimpl_state* > (this->CategoryType_pimpl_state_.top ())->CategoryType_;
  this->CategoryType_pimpl_state_.pop ();
  return r;
}

// SourceRef_pimpl
//

void SourceRef_pimpl::
pre ()
{
  this->SourceRef_pimpl_state_.SourceRef_ = ::SourceRef ();
}

void SourceRef_pimpl::
qnameref (const ::std::string& x)
{
  this->SourceRef_pimpl_state_.SourceRef_.qnameref (x);
}

::SourceRef SourceRef_pimpl::
post_SourceRef ()
{
  return this->SourceRef_pimpl_state_.SourceRef_;
}

// SourceList_pimpl
//

SourceList_pimpl::
SourceList_pimpl (bool b)
{
  this->SourceList_pimpl_base_ = b;
  this->SourceList_pimpl_state_.SourceList_ = 0;
}

SourceList_pimpl::
~SourceList_pimpl ()
{
  if (!this->SourceList_pimpl_base_)
    delete this->SourceList_pimpl_state_.SourceList_;
}

void SourceList_pimpl::
_reset ()
{
  SourceList_pskel::_reset ();

  if (!this->SourceList_pimpl_base_)
  {
    delete this->SourceList_pimpl_state_.SourceList_;
    this->SourceList_pimpl_state_.SourceList_ = 0;
  }
}

void SourceList_pimpl::
pre_impl (::SourceList* x)
{
  this->SourceList_pimpl_state_.SourceList_ = x;
}

void SourceList_pimpl::
pre ()
{
  this->pre_impl (new ::SourceList);
}

void SourceList_pimpl::
SourceRef (const ::SourceRef& x)
{
  this->SourceList_pimpl_state_.SourceList_->SourceRef ().push_back (x);
}

::SourceList* SourceList_pimpl::
post_SourceList ()
{
  ::SourceList* r = this->SourceList_pimpl_state_.SourceList_;
  this->SourceList_pimpl_state_.SourceList_ = 0;
  return r;
}

// jProposalRef_pimpl
//

void jProposalRef_pimpl::
pre ()
{
  this->jProposalRef_pimpl_state_.jProposalRef_ = ::jProposalRef ();
}

void jProposalRef_pimpl::
qnameref (const ::std::string& x)
{
  this->jProposalRef_pimpl_state_.jProposalRef_.qnameref (x);
}

::jProposalRef jProposalRef_pimpl::
post_jProposalRef ()
{
  return this->jProposalRef_pimpl_state_.jProposalRef_;
}

// jProposal_pimpl
//

jProposal_pimpl::
jProposal_pimpl (bool b)
: jProposal_pskel (&base_impl_),
  base_impl_ (true)
{
  this->jProposal_pimpl_base_ = b;
  this->jProposal_pimpl_state_.jProposal_ = 0;
}

jProposal_pimpl::
~jProposal_pimpl ()
{
  if (!this->jProposal_pimpl_base_)
    delete this->jProposal_pimpl_state_.jProposal_;
}

void jProposal_pimpl::
_reset ()
{
  jProposal_pskel::_reset ();

  if (!this->jProposal_pimpl_base_)
  {
    delete this->jProposal_pimpl_state_.jProposal_;
    this->jProposal_pimpl_state_.jProposal_ = 0;
  }
}

void jProposal_pimpl::
pre_impl (::jProposal* x)
{
  this->jProposal_pimpl_state_.jProposal_ = x;
  this->base_impl_.pre_impl (x);
}

void jProposal_pimpl::
pre ()
{
  this->pre_impl (new ::jProposal);
}

void jProposal_pimpl::
jProposalRef (const ::jProposalRef& x)
{
  this->jProposal_pimpl_state_.jProposal_->jProposalRef (x);
}

::jProposal* jProposal_pimpl::
post_jProposal ()
{
  this->base_impl_.post_jProposalType ();
  ::jProposal* r = this->jProposal_pimpl_state_.jProposal_;
  this->jProposal_pimpl_state_.jProposal_ = 0;
  return r;
}

// jProblemList_pimpl
//

jProblemList_pimpl::
jProblemList_pimpl (bool b)
{
  this->jProblemList_pimpl_base_ = b;
  this->jProblemList_pimpl_state_.jProblemList_ = 0;
}

jProblemList_pimpl::
~jProblemList_pimpl ()
{
  if (!this->jProblemList_pimpl_base_)
    delete this->jProblemList_pimpl_state_.jProblemList_;
}

void jProblemList_pimpl::
_reset ()
{
  jProblemList_pskel::_reset ();

  if (!this->jProblemList_pimpl_base_)
  {
    delete this->jProblemList_pimpl_state_.jProblemList_;
    this->jProblemList_pimpl_state_.jProblemList_ = 0;
  }
}

void jProblemList_pimpl::
pre_impl (::jProblemList* x)
{
  this->jProblemList_pimpl_state_.jProblemList_ = x;
}

void jProblemList_pimpl::
pre ()
{
  this->pre_impl (new ::jProblemList);
}

void jProblemList_pimpl::
jProblem (::jProblem* x)
{
  this->jProblemList_pimpl_state_.jProblemList_->jProblem ().push_back (x);
}

::jProblemList* jProblemList_pimpl::
post_jProblemList ()
{
  ::jProblemList* r = this->jProblemList_pimpl_state_.jProblemList_;
  this->jProblemList_pimpl_state_.jProblemList_ = 0;
  return r;
}

// kmx_pimpl
//

kmx_pimpl::
kmx_pimpl (bool b)
{
  this->kmx_pimpl_base_ = b;
  this->kmx_pimpl_state_.kmx_ = 0;
}

kmx_pimpl::
~kmx_pimpl ()
{
  if (!this->kmx_pimpl_base_)
    delete this->kmx_pimpl_state_.kmx_;
}

void kmx_pimpl::
_reset ()
{
  kmx_pskel::_reset ();

  if (!this->kmx_pimpl_base_)
  {
    delete this->kmx_pimpl_state_.kmx_;
    this->kmx_pimpl_state_.kmx_ = 0;
  }
}

void kmx_pimpl::
pre_impl (::kmx* x)
{
  this->kmx_pimpl_state_.kmx_ = x;
}

void kmx_pimpl::
pre ()
{
  this->pre_impl (new ::kmx);
}

void kmx_pimpl::
name (const ::std::string& x)
{
  this->kmx_pimpl_state_.kmx_->name (x);
}

void kmx_pimpl::
version (const ::std::string& x)
{
  this->kmx_pimpl_state_.kmx_->version (x);
}

void kmx_pimpl::
References (::References* x)
{
  this->kmx_pimpl_state_.kmx_->References (x);
}

void kmx_pimpl::
Content (::Content* x)
{
  this->kmx_pimpl_state_.kmx_->Content (x);
}

::kmx* kmx_pimpl::
post_kmx ()
{
  ::kmx* r = this->kmx_pimpl_state_.kmx_;
  this->kmx_pimpl_state_.kmx_ = 0;
  return r;
}

// Solution_pimpl
//

void Solution_pimpl::
pre ()
{
  this->Solution_pimpl_state_.Solution_ = ::Solution ();
}

void Solution_pimpl::
idref (unsigned int x)
{
  this->Solution_pimpl_state_.Solution_.idref (x);
}

::Solution Solution_pimpl::
post_Solution ()
{
  return this->Solution_pimpl_state_.Solution_;
}

// jProblem_pimpl
//

jProblem_pimpl::
jProblem_pimpl (bool b)
{
  this->jProblem_pimpl_base_ = b;
  this->jProblem_pimpl_state_.jProblem_ = 0;
}

jProblem_pimpl::
~jProblem_pimpl ()
{
  if (!this->jProblem_pimpl_base_)
    delete this->jProblem_pimpl_state_.jProblem_;
}

void jProblem_pimpl::
_reset ()
{
  jProblem_pskel::_reset ();

  if (!this->jProblem_pimpl_base_)
  {
    delete this->jProblem_pimpl_state_.jProblem_;
    this->jProblem_pimpl_state_.jProblem_ = 0;
  }
}

void jProblem_pimpl::
pre_impl (::jProblem* x)
{
  this->jProblem_pimpl_state_.jProblem_ = x;
}

void jProblem_pimpl::
pre ()
{
  this->pre_impl (new ::jProblem);
}

void jProblem_pimpl::
id (unsigned int x)
{
  this->jProblem_pimpl_state_.jProblem_->id (x);
}

void jProblem_pimpl::
PropertyList (::PropertyListType* x)
{
  this->jProblem_pimpl_state_.jProblem_->PropertyList (x);
}

void jProblem_pimpl::
Text (const ::std::string& x)
{
  this->jProblem_pimpl_state_.jProblem_->Text (x);
}

void jProblem_pimpl::
Solution (const ::Solution& x)
{
  this->jProblem_pimpl_state_.jProblem_->Solution ().push_back (x);
}

::jProblem* jProblem_pimpl::
post_jProblem ()
{
  ::jProblem* r = this->jProblem_pimpl_state_.jProblem_;
  this->jProblem_pimpl_state_.jProblem_ = 0;
  return r;
}

// References_pimpl
//

References_pimpl::
References_pimpl (bool b)
{
  this->References_pimpl_base_ = b;
  this->References_pimpl_state_.References_ = 0;
}

References_pimpl::
~References_pimpl ()
{
  if (!this->References_pimpl_base_)
    delete this->References_pimpl_state_.References_;
}

void References_pimpl::
_reset ()
{
  References_pskel::_reset ();

  if (!this->References_pimpl_base_)
  {
    delete this->References_pimpl_state_.References_;
    this->References_pimpl_state_.References_ = 0;
  }
}

void References_pimpl::
pre_impl (::References* x)
{
  this->References_pimpl_state_.References_ = x;
}

void References_pimpl::
pre ()
{
  this->pre_impl (new ::References);
}

void References_pimpl::
RefSourceList (::RefSourceList* x)
{
  this->References_pimpl_state_.References_->RefSourceList (x);
}

void References_pimpl::
RefProposalTypeList (::RefProposalTypeList* x)
{
  this->References_pimpl_state_.References_->RefProposalTypeList (x);
}

::References* References_pimpl::
post_References ()
{
  ::References* r = this->References_pimpl_state_.References_;
  this->References_pimpl_state_.References_ = 0;
  return r;
}

// Content_pimpl
//

Content_pimpl::
Content_pimpl (bool b)
{
  this->Content_pimpl_base_ = b;
  this->Content_pimpl_state_.Content_ = 0;
}

Content_pimpl::
~Content_pimpl ()
{
  if (!this->Content_pimpl_base_)
    delete this->Content_pimpl_state_.Content_;
}

void Content_pimpl::
_reset ()
{
  Content_pskel::_reset ();

  if (!this->Content_pimpl_base_)
  {
    delete this->Content_pimpl_state_.Content_;
    this->Content_pimpl_state_.Content_ = 0;
  }
}

void Content_pimpl::
pre_impl (::Content* x)
{
  this->Content_pimpl_state_.Content_ = x;
}

void Content_pimpl::
pre ()
{
  this->pre_impl (new ::Content);
}

void Content_pimpl::
Category (::CategoryType* x)
{
  this->Content_pimpl_state_.Content_->Category ().push_back (x);
}

::Content* Content_pimpl::
post_Content ()
{
  ::Content* r = this->Content_pimpl_state_.Content_;
  this->Content_pimpl_state_.Content_ = 0;
  return r;
}

// RefSourceList_pimpl
//

RefSourceList_pimpl::
RefSourceList_pimpl (bool b)
{
  this->RefSourceList_pimpl_base_ = b;
  this->RefSourceList_pimpl_state_.RefSourceList_ = 0;
}

RefSourceList_pimpl::
~RefSourceList_pimpl ()
{
  if (!this->RefSourceList_pimpl_base_)
    delete this->RefSourceList_pimpl_state_.RefSourceList_;
}

void RefSourceList_pimpl::
_reset ()
{
  RefSourceList_pskel::_reset ();

  if (!this->RefSourceList_pimpl_base_)
  {
    delete this->RefSourceList_pimpl_state_.RefSourceList_;
    this->RefSourceList_pimpl_state_.RefSourceList_ = 0;
  }
}

void RefSourceList_pimpl::
pre_impl (::RefSourceList* x)
{
  this->RefSourceList_pimpl_state_.RefSourceList_ = x;
}

void RefSourceList_pimpl::
pre ()
{
  this->pre_impl (new ::RefSourceList);
}

void RefSourceList_pimpl::
Source (::Source* x)
{
  this->RefSourceList_pimpl_state_.RefSourceList_->Source ().push_back (x);
}

::RefSourceList* RefSourceList_pimpl::
post_RefSourceList ()
{
  ::RefSourceList* r = this->RefSourceList_pimpl_state_.RefSourceList_;
  this->RefSourceList_pimpl_state_.RefSourceList_ = 0;
  return r;
}

// RefProposalTypeList_pimpl
//

RefProposalTypeList_pimpl::
RefProposalTypeList_pimpl (bool b)
{
  this->RefProposalTypeList_pimpl_base_ = b;
  this->RefProposalTypeList_pimpl_state_.RefProposalTypeList_ = 0;
}

RefProposalTypeList_pimpl::
~RefProposalTypeList_pimpl ()
{
  if (!this->RefProposalTypeList_pimpl_base_)
    delete this->RefProposalTypeList_pimpl_state_.RefProposalTypeList_;
}

void RefProposalTypeList_pimpl::
_reset ()
{
  RefProposalTypeList_pskel::_reset ();

  if (!this->RefProposalTypeList_pimpl_base_)
  {
    delete this->RefProposalTypeList_pimpl_state_.RefProposalTypeList_;
    this->RefProposalTypeList_pimpl_state_.RefProposalTypeList_ = 0;
  }
}

void RefProposalTypeList_pimpl::
pre_impl (::RefProposalTypeList* x)
{
  this->RefProposalTypeList_pimpl_state_.RefProposalTypeList_ = x;
}

void RefProposalTypeList_pimpl::
pre ()
{
  this->pre_impl (new ::RefProposalTypeList);
}

void RefProposalTypeList_pimpl::
jProposalList (::jProposalList* x)
{
  this->RefProposalTypeList_pimpl_state_.RefProposalTypeList_->jProposalList (x);
}

::RefProposalTypeList* RefProposalTypeList_pimpl::
post_RefProposalTypeList ()
{
  ::RefProposalTypeList* r = this->RefProposalTypeList_pimpl_state_.RefProposalTypeList_;
  this->RefProposalTypeList_pimpl_state_.RefProposalTypeList_ = 0;
  return r;
}

// Source_pimpl
//

Source_pimpl::
Source_pimpl (bool b)
{
  this->Source_pimpl_base_ = b;
  this->Source_pimpl_state_.Source_ = 0;
}

Source_pimpl::
~Source_pimpl ()
{
  if (!this->Source_pimpl_base_)
    delete this->Source_pimpl_state_.Source_;
}

void Source_pimpl::
_reset ()
{
  Source_pskel::_reset ();

  if (!this->Source_pimpl_base_)
  {
    delete this->Source_pimpl_state_.Source_;
    this->Source_pimpl_state_.Source_ = 0;
  }
}

void Source_pimpl::
pre_impl (::Source* x)
{
  this->Source_pimpl_state_.Source_ = x;
}

void Source_pimpl::
pre ()
{
  this->pre_impl (new ::Source);
}

void Source_pimpl::
qname (const ::std::string& x)
{
  this->Source_pimpl_state_.Source_->qname (x);
}

void Source_pimpl::
uri (const ::std::string& x)
{
  this->Source_pimpl_state_.Source_->uri (x);
}

void Source_pimpl::
PropertyList (::PropertyListType* x)
{
  this->Source_pimpl_state_.Source_->PropertyList (x);
}

::Source* Source_pimpl::
post_Source ()
{
  ::Source* r = this->Source_pimpl_state_.Source_;
  this->Source_pimpl_state_.Source_ = 0;
  return r;
}

// jProposalList_pimpl
//

jProposalList_pimpl::
jProposalList_pimpl (bool b)
{
  this->jProposalList_pimpl_base_ = b;
  this->jProposalList_pimpl_state_.jProposalList_ = 0;
}

jProposalList_pimpl::
~jProposalList_pimpl ()
{
  if (!this->jProposalList_pimpl_base_)
    delete this->jProposalList_pimpl_state_.jProposalList_;
}

void jProposalList_pimpl::
_reset ()
{
  jProposalList_pskel::_reset ();

  if (!this->jProposalList_pimpl_base_)
  {
    delete this->jProposalList_pimpl_state_.jProposalList_;
    this->jProposalList_pimpl_state_.jProposalList_ = 0;
  }
}

void jProposalList_pimpl::
pre_impl (::jProposalList* x)
{
  this->jProposalList_pimpl_state_.jProposalList_ = x;
}

void jProposalList_pimpl::
pre ()
{
  this->pre_impl (new ::jProposalList);
}

void jProposalList_pimpl::
jProposal (::jProposalType* x)
{
  this->jProposalList_pimpl_state_.jProposalList_->jProposal ().push_back (x);
}

::jProposalList* jProposalList_pimpl::
post_jProposalList ()
{
  ::jProposalList* r = this->jProposalList_pimpl_state_.jProposalList_;
  this->jProposalList_pimpl_state_.jProposalList_ = 0;
  return r;
}

// kmx_paggr
//

kmx_paggr::
kmx_paggr ()
{
  this->LabelType_p_.parsers (this->unsigned_int_p_);

  this->jProposalRef_p_.parsers (this->idref_p_);

  this->jProblemList_p_.parsers (this->jProblem_p_);

  this->jProblem_p_.parsers (this->unsigned_int_p_,
                             this->PropertyListType_p_,
                             this->string_p_,
                             this->Solution_p_);

  this->Solution_p_.parsers (this->unsigned_int_p_);

  this->CategoryType_p_.parsers (this->non_negative_integer_p_,
                                 this->string_p_,
                                 this->PropertyListType_p_,
                                 this->string_p_,
                                 this->CategoryType_p_,
                                 this->jGroupType_p_);

  this->kmx_p_.parsers (this->string_p_,
                        this->string_p_,
                        this->References_p_,
                        this->Content_p_);

  this->References_p_.parsers (this->RefSourceList_p_,
                               this->RefProposalTypeList_p_);

  this->PropertyListType_p_.parsers (this->Property_p_);

  this->Property_p_.parsers (this->ncname_p_,
                             this->string_p_);

  this->jProposalType_p_.parsers (this->boolean_p_,
                                  this->id_p_,
                                  this->LabelType_p_);

  this->ImageListType_p_.parsers (this->Image_p_);

  this->Image_p_.parsers (this->unsigned_int_p_,
                          this->uri_p_);

  this->jGroupType_p_.parsers (this->unsigned_int_p_,
                               this->string_p_,
                               this->PropertyListType_p_,
                               this->SourceList_p_,
                               this->string_p_,
                               this->ImageListType_p_,
                               this->string_p_,
                               this->string_p_,
                               this->jProposal_p_,
                               this->jProblemList_p_);

  this->SourceList_p_.parsers (this->SourceRef_p_);

  this->SourceRef_p_.parsers (this->idref_p_);

  this->jProposal_p_.parsers (this->boolean_p_,
                              this->id_p_,
                              this->LabelType_p_,
                              this->jProposalRef_p_);

  this->RefSourceList_p_.parsers (this->Source_p_);

  this->Source_p_.parsers (this->id_p_,
                           this->uri_p_,
                           this->PropertyListType_p_);

  this->RefProposalTypeList_p_.parsers (this->jProposalList_p_);

  this->jProposalList_p_.parsers (this->jProposalType_p_);

  this->Content_p_.parsers (this->CategoryType_p_);
}

const char* kmx_paggr::
root_name ()
{
  return "kmx";
}

const char* kmx_paggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

