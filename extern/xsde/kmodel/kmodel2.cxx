// Copyright (C) 2005-2009 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "kmodel2.hxx"

#include <stdlib.h>
#include <new>

// LabelType
//

LabelType::
LabelType ()
{
}

LabelType::
~LabelType ()
{
}

LabelType::
LabelType (const LabelType& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_ = x.id_;
}

LabelType& LabelType::
operator= (const LabelType& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_ = x.id_;
  return *this;
}

// Property
//

Property::
Property ()
{
}

Property::
~Property ()
{
}

Property::
Property (const Property& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->key_ = x.key_;
  this->value_ = x.value_;
}

Property& Property::
operator= (const Property& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->key_ = x.key_;
  this->value_ = x.value_;
  return *this;
}

// PropertyListType
//

PropertyListType::
PropertyListType ()
{
}

PropertyListType::
~PropertyListType ()
{
}

// jProposalType
//

jProposalType::
jProposalType ()
{
}

jProposalType::
~jProposalType ()
{
}

// Image
//

Image::
Image ()
{
}

Image::
~Image ()
{
}

Image::
Image (const Image& x)
: ::std::string (x)
{
  XSDE_UNUSED (x);
  this->id_ = x.id_;
  this->uri_ = x.uri_;
}

Image& Image::
operator= (const Image& x)
{
  XSDE_UNUSED (x);
  static_cast< ::std::string& > (*this) = x;
  this->id_ = x.id_;
  this->uri_ = x.uri_;
  return *this;
}

// ImageListType
//

ImageListType::
ImageListType ()
{
}

ImageListType::
~ImageListType ()
{
}

// jGroupType
//

jGroupType::
jGroupType ()
{
  this->PropertyList_ = 0;
  this->SourceList_ = 0;
  this->ImageList_ = 0;
  this->jProposal_ = 0;
  this->jProblemList_ = 0;
}

jGroupType::
~jGroupType ()
{
  delete this->PropertyList_;
  delete this->SourceList_;
  delete this->ImageList_;
  delete this->jProposal_;
  delete this->jProblemList_;
}

// CategoryType
//

CategoryType::
CategoryType ()
{
  this->PropertyList_ = 0;
}

CategoryType::
~CategoryType ()
{
  delete this->PropertyList_;
}

// SourceRef
//

SourceRef::
SourceRef ()
{
  this->qnameref_present_ = false;
}

SourceRef::
~SourceRef ()
{
}

SourceRef::
SourceRef (const SourceRef& x)
{
  XSDE_UNUSED (x);
  this->qnameref_present_ = x.qnameref_present_;
  if (this->qnameref_present_)
    this->qnameref_ = x.qnameref_;
}

SourceRef& SourceRef::
operator= (const SourceRef& x)
{
  XSDE_UNUSED (x);
  this->qnameref_present_ = x.qnameref_present_;
  if (this->qnameref_present_)
    this->qnameref_ = x.qnameref_;
  return *this;
}

// SourceList
//

SourceList::
SourceList ()
{
}

SourceList::
~SourceList ()
{
}

// jProposalRef
//

jProposalRef::
jProposalRef ()
{
}

jProposalRef::
~jProposalRef ()
{
}

jProposalRef::
jProposalRef (const jProposalRef& x)
{
  XSDE_UNUSED (x);
  this->qnameref_ = x.qnameref_;
}

jProposalRef& jProposalRef::
operator= (const jProposalRef& x)
{
  XSDE_UNUSED (x);
  this->qnameref_ = x.qnameref_;
  return *this;
}

// jProposal
//

jProposal::
jProposal ()
{
  this->jProposalRef_present_ = false;
}

jProposal::
~jProposal ()
{
}

// jProblemList
//

jProblemList::
jProblemList ()
{
}

jProblemList::
~jProblemList ()
{
}

// kmx
//

kmx::
kmx ()
{
  this->References_ = 0;
  this->Content_ = 0;
}

kmx::
~kmx ()
{
  delete this->References_;
  delete this->Content_;
}

// Solution
//

Solution::
Solution ()
{
  this->idref_present_ = false;
}

Solution::
~Solution ()
{
}

Solution::
Solution (const Solution& x)
{
  XSDE_UNUSED (x);
  this->idref_present_ = x.idref_present_;
  if (this->idref_present_)
    this->idref_ = x.idref_;
}

Solution& Solution::
operator= (const Solution& x)
{
  XSDE_UNUSED (x);
  this->idref_present_ = x.idref_present_;
  if (this->idref_present_)
    this->idref_ = x.idref_;
  return *this;
}

// jProblem
//

jProblem::
jProblem ()
{
  this->PropertyList_ = 0;
}

jProblem::
~jProblem ()
{
  delete this->PropertyList_;
}

// References
//

References::
References ()
{
  this->RefSourceList_ = 0;
  this->RefProposalTypeList_ = 0;
}

References::
~References ()
{
  delete this->RefSourceList_;
  delete this->RefProposalTypeList_;
}

// Content
//

Content::
Content ()
{
}

Content::
~Content ()
{
}

// RefSourceList
//

RefSourceList::
RefSourceList ()
{
}

RefSourceList::
~RefSourceList ()
{
}

// RefProposalTypeList
//

RefProposalTypeList::
RefProposalTypeList ()
{
  this->jProposalList_ = 0;
}

RefProposalTypeList::
~RefProposalTypeList ()
{
  delete this->jProposalList_;
}

// Source
//

Source::
Source ()
{
  this->PropertyList_ = 0;
}

Source::
~Source ()
{
  delete this->PropertyList_;
}

// jProposalList
//

jProposalList::
jProposalList ()
{
}

jProposalList::
~jProposalList ()
{
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

