// Copyright (C) 2005-2009 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef KMODEL2_PSKEL_HXX
#define KMODEL2_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3010000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifdef XSDE_LONGLONG
#error the XSD/e runtime uses long long while the generated code does not (reconfigure the runtime or remove --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
class LabelType_pskel;
class Property_pskel;
class PropertyListType_pskel;
class jProposalType_pskel;
class Image_pskel;
class ImageListType_pskel;
class jGroupType_pskel;
class CategoryType_pskel;
class SourceRef_pskel;
class SourceList_pskel;
class jProposalRef_pskel;
class jProposal_pskel;
class jProblemList_pskel;
class kmx_pskel;
class Solution_pskel;
class jProblem_pskel;
class References_pskel;
class Content_pskel;
class RefSourceList_pskel;
class RefProposalTypeList_pskel;
class Source_pskel;
class jProposalList_pskel;

#include <xsde/config.h>
#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

#include "kmodel2.hxx"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsde::cxx::parser::validating::any_type_pskel any_type_pskel;
  typedef ::xsde::cxx::parser::validating::any_type_pimpl any_type_pimpl;

  typedef ::xsde::cxx::parser::validating::any_simple_type_pskel any_simple_type_pskel;
  typedef ::xsde::cxx::parser::validating::any_simple_type_pimpl any_simple_type_pimpl;

  typedef ::xsde::cxx::parser::validating::byte_pskel byte_pskel;
  typedef ::xsde::cxx::parser::validating::byte_pimpl byte_pimpl;

  typedef ::xsde::cxx::parser::validating::unsigned_byte_pskel unsigned_byte_pskel;
  typedef ::xsde::cxx::parser::validating::unsigned_byte_pimpl unsigned_byte_pimpl;

  typedef ::xsde::cxx::parser::validating::short_pskel short_pskel;
  typedef ::xsde::cxx::parser::validating::short_pimpl short_pimpl;

  typedef ::xsde::cxx::parser::validating::unsigned_short_pskel unsigned_short_pskel;
  typedef ::xsde::cxx::parser::validating::unsigned_short_pimpl unsigned_short_pimpl;

  typedef ::xsde::cxx::parser::validating::int_pskel int_pskel;
  typedef ::xsde::cxx::parser::validating::int_pimpl int_pimpl;

  typedef ::xsde::cxx::parser::validating::unsigned_int_pskel unsigned_int_pskel;
  typedef ::xsde::cxx::parser::validating::unsigned_int_pimpl unsigned_int_pimpl;

  typedef ::xsde::cxx::parser::validating::long_pskel long_pskel;
  typedef ::xsde::cxx::parser::validating::long_pimpl long_pimpl;

  typedef ::xsde::cxx::parser::validating::unsigned_long_pskel unsigned_long_pskel;
  typedef ::xsde::cxx::parser::validating::unsigned_long_pimpl unsigned_long_pimpl;

  typedef ::xsde::cxx::parser::validating::integer_pskel integer_pskel;
  typedef ::xsde::cxx::parser::validating::integer_pimpl integer_pimpl;

  typedef ::xsde::cxx::parser::validating::non_positive_integer_pskel non_positive_integer_pskel;
  typedef ::xsde::cxx::parser::validating::non_positive_integer_pimpl non_positive_integer_pimpl;

  typedef ::xsde::cxx::parser::validating::non_negative_integer_pskel non_negative_integer_pskel;
  typedef ::xsde::cxx::parser::validating::non_negative_integer_pimpl non_negative_integer_pimpl;

  typedef ::xsde::cxx::parser::validating::positive_integer_pskel positive_integer_pskel;
  typedef ::xsde::cxx::parser::validating::positive_integer_pimpl positive_integer_pimpl;

  typedef ::xsde::cxx::parser::validating::negative_integer_pskel negative_integer_pskel;
  typedef ::xsde::cxx::parser::validating::negative_integer_pimpl negative_integer_pimpl;

  typedef ::xsde::cxx::parser::validating::boolean_pskel boolean_pskel;
  typedef ::xsde::cxx::parser::validating::boolean_pimpl boolean_pimpl;

  typedef ::xsde::cxx::parser::validating::float_pskel float_pskel;
  typedef ::xsde::cxx::parser::validating::float_pimpl float_pimpl;

  typedef ::xsde::cxx::parser::validating::double_pskel double_pskel;
  typedef ::xsde::cxx::parser::validating::double_pimpl double_pimpl;

  typedef ::xsde::cxx::parser::validating::decimal_pskel decimal_pskel;
  typedef ::xsde::cxx::parser::validating::decimal_pimpl decimal_pimpl;

  typedef ::xsde::cxx::parser::validating::string_pskel string_pskel;
  typedef ::xsde::cxx::parser::validating::string_pimpl string_pimpl;

  typedef ::xsde::cxx::parser::validating::normalized_string_pskel normalized_string_pskel;
  typedef ::xsde::cxx::parser::validating::normalized_string_pimpl normalized_string_pimpl;

  typedef ::xsde::cxx::parser::validating::token_pskel token_pskel;
  typedef ::xsde::cxx::parser::validating::token_pimpl token_pimpl;

  typedef ::xsde::cxx::parser::validating::name_pskel name_pskel;
  typedef ::xsde::cxx::parser::validating::name_pimpl name_pimpl;

  typedef ::xsde::cxx::parser::validating::nmtoken_pskel nmtoken_pskel;
  typedef ::xsde::cxx::parser::validating::nmtoken_pimpl nmtoken_pimpl;

  typedef ::xsde::cxx::parser::validating::nmtokens_pskel nmtokens_pskel;
  typedef ::xsde::cxx::parser::validating::nmtokens_pimpl nmtokens_pimpl;

  typedef ::xsde::cxx::parser::validating::ncname_pskel ncname_pskel;
  typedef ::xsde::cxx::parser::validating::ncname_pimpl ncname_pimpl;

  typedef ::xsde::cxx::parser::validating::language_pskel language_pskel;
  typedef ::xsde::cxx::parser::validating::language_pimpl language_pimpl;

  typedef ::xsde::cxx::parser::validating::id_pskel id_pskel;
  typedef ::xsde::cxx::parser::validating::id_pimpl id_pimpl;

  typedef ::xsde::cxx::parser::validating::idref_pskel idref_pskel;
  typedef ::xsde::cxx::parser::validating::idref_pimpl idref_pimpl;

  typedef ::xsde::cxx::parser::validating::idrefs_pskel idrefs_pskel;
  typedef ::xsde::cxx::parser::validating::idrefs_pimpl idrefs_pimpl;

  typedef ::xsde::cxx::parser::validating::uri_pskel uri_pskel;
  typedef ::xsde::cxx::parser::validating::uri_pimpl uri_pimpl;

  typedef ::xsde::cxx::parser::validating::qname_pskel qname_pskel;
  typedef ::xsde::cxx::parser::validating::qname_pimpl qname_pimpl;

  typedef ::xsde::cxx::parser::validating::base64_binary_pskel base64_binary_pskel;
  typedef ::xsde::cxx::parser::validating::base64_binary_pimpl base64_binary_pimpl;

  typedef ::xsde::cxx::parser::validating::hex_binary_pskel hex_binary_pskel;
  typedef ::xsde::cxx::parser::validating::hex_binary_pimpl hex_binary_pimpl;

  typedef ::xsde::cxx::parser::validating::date_pskel date_pskel;
  typedef ::xsde::cxx::parser::validating::date_pimpl date_pimpl;

  typedef ::xsde::cxx::parser::validating::date_time_pskel date_time_pskel;
  typedef ::xsde::cxx::parser::validating::date_time_pimpl date_time_pimpl;

  typedef ::xsde::cxx::parser::validating::duration_pskel duration_pskel;
  typedef ::xsde::cxx::parser::validating::duration_pimpl duration_pimpl;

  typedef ::xsde::cxx::parser::validating::gday_pskel gday_pskel;
  typedef ::xsde::cxx::parser::validating::gday_pimpl gday_pimpl;

  typedef ::xsde::cxx::parser::validating::gmonth_pskel gmonth_pskel;
  typedef ::xsde::cxx::parser::validating::gmonth_pimpl gmonth_pimpl;

  typedef ::xsde::cxx::parser::validating::gmonth_day_pskel gmonth_day_pskel;
  typedef ::xsde::cxx::parser::validating::gmonth_day_pimpl gmonth_day_pimpl;

  typedef ::xsde::cxx::parser::validating::gyear_pskel gyear_pskel;
  typedef ::xsde::cxx::parser::validating::gyear_pimpl gyear_pimpl;

  typedef ::xsde::cxx::parser::validating::gyear_month_pskel gyear_month_pskel;
  typedef ::xsde::cxx::parser::validating::gyear_month_pimpl gyear_month_pimpl;

  typedef ::xsde::cxx::parser::validating::time_pskel time_pskel;
  typedef ::xsde::cxx::parser::validating::time_pimpl time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

class LabelType_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (unsigned int);

  virtual ::LabelType
  post_LabelType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::unsigned_int_pskel& /* id */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::unsigned_int_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  LabelType_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  LabelType_pskel* LabelType_impl_;
  LabelType_pskel (LabelType_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::unsigned_int_pskel* id_parser_;

  protected:
  struct v_state_attr_
  {
    bool id;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class Property_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  key (const ::std::string&);

  virtual void
  value (const ::std::string&);

  virtual ::Property
  post_Property () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::ncname_pskel& /* key */,
           ::xml_schema::string_pskel& /* value */);

  // Individual attribute parsers.
  //
  void
  key_parser (::xml_schema::ncname_pskel&);

  void
  value_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  Property_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  Property_pskel* Property_impl_;
  Property_pskel (Property_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::ncname_pskel* key_parser_;
  ::xml_schema::string_pskel* value_parser_;

  protected:
  struct v_state_attr_
  {
    bool key;
    bool value;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class PropertyListType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  Property (const ::Property&);

  virtual ::PropertyListType*
  post_PropertyListType () = 0;

  // Parser construction API.
  //
  void
  parsers (::Property_pskel& /* Property */);

  // Individual element parsers.
  //
  void
  Property_parser (::Property_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  PropertyListType_pskel ();

  // Implementation details.
  //
  protected:
  PropertyListType_pskel* PropertyListType_impl_;
  PropertyListType_pskel (PropertyListType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::Property_pskel* Property_parser_;

  protected:
  struct v_state_descr_
  {
    void (::PropertyListType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class jProposalType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  mc (bool);

  virtual void
  qname (const ::std::string&);

  // Elements.
  //
  virtual void
  Label (const ::LabelType&);

  virtual ::jProposalType*
  post_jProposalType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::boolean_pskel& /* mc */,
           ::xml_schema::id_pskel& /* qname */,
           ::LabelType_pskel& /* Label */);

  // Individual attribute parsers.
  //
  void
  mc_parser (::xml_schema::boolean_pskel&);

  void
  qname_parser (::xml_schema::id_pskel&);

  // Individual element parsers.
  //
  void
  Label_parser (::LabelType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  jProposalType_pskel ();

  // Implementation details.
  //
  protected:
  jProposalType_pskel* jProposalType_impl_;
  jProposalType_pskel (jProposalType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::boolean_pskel* mc_parser_;
  ::xml_schema::id_pskel* qname_parser_;
  ::LabelType_pskel* Label_parser_;

  protected:
  struct v_state_descr_
  {
    void (::jProposalType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool mc;
    bool qname;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class Image_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (unsigned int);

  virtual void
  uri (const ::std::string&);

  virtual ::Image
  post_Image () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::unsigned_int_pskel& /* id */,
           ::xml_schema::uri_pskel& /* uri */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::unsigned_int_pskel&);

  void
  uri_parser (::xml_schema::uri_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  Image_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  Image_pskel* Image_impl_;
  Image_pskel (Image_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::unsigned_int_pskel* id_parser_;
  ::xml_schema::uri_pskel* uri_parser_;

  protected:
  struct v_state_attr_
  {
    bool id;
    bool uri;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class ImageListType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  Image (const ::Image&);

  virtual ::ImageListType*
  post_ImageListType () = 0;

  // Parser construction API.
  //
  void
  parsers (::Image_pskel& /* Image */);

  // Individual element parsers.
  //
  void
  Image_parser (::Image_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  ImageListType_pskel ();

  // Implementation details.
  //
  protected:
  ImageListType_pskel* ImageListType_impl_;
  ImageListType_pskel (ImageListType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::Image_pskel* Image_parser_;

  protected:
  struct v_state_descr_
  {
    void (::ImageListType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class jGroupType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (unsigned int);

  virtual void
  name (const ::std::string&);

  // Elements.
  //
  virtual void
  PropertyList (::PropertyListType*);

  virtual void
  SourceList (::SourceList*);

  virtual void
  Description (const ::std::string&);

  virtual void
  ImageList (::ImageListType*);

  virtual void
  Text (const ::std::string&);

  virtual void
  Hint (const ::std::string&);

  virtual void
  jProposal (::jProposal*);

  virtual void
  jProblemList (::jProblemList*);

  virtual ::jGroupType*
  post_jGroupType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::unsigned_int_pskel& /* id */,
           ::xml_schema::string_pskel& /* name */,
           ::PropertyListType_pskel& /* PropertyList */,
           ::SourceList_pskel& /* SourceList */,
           ::xml_schema::string_pskel& /* Description */,
           ::ImageListType_pskel& /* ImageList */,
           ::xml_schema::string_pskel& /* Text */,
           ::xml_schema::string_pskel& /* Hint */,
           ::jProposal_pskel& /* jProposal */,
           ::jProblemList_pskel& /* jProblemList */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::unsigned_int_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  // Individual element parsers.
  //
  void
  PropertyList_parser (::PropertyListType_pskel&);

  void
  SourceList_parser (::SourceList_pskel&);

  void
  Description_parser (::xml_schema::string_pskel&);

  void
  ImageList_parser (::ImageListType_pskel&);

  void
  Text_parser (::xml_schema::string_pskel&);

  void
  Hint_parser (::xml_schema::string_pskel&);

  void
  jProposal_parser (::jProposal_pskel&);

  void
  jProblemList_parser (::jProblemList_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  jGroupType_pskel ();

  // Implementation details.
  //
  protected:
  jGroupType_pskel* jGroupType_impl_;
  jGroupType_pskel (jGroupType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::unsigned_int_pskel* id_parser_;
  ::xml_schema::string_pskel* name_parser_;
  ::PropertyListType_pskel* PropertyList_parser_;
  ::SourceList_pskel* SourceList_parser_;
  ::xml_schema::string_pskel* Description_parser_;
  ::ImageListType_pskel* ImageList_parser_;
  ::xml_schema::string_pskel* Text_parser_;
  ::xml_schema::string_pskel* Hint_parser_;
  ::jProposal_pskel* jProposal_parser_;
  ::jProblemList_pskel* jProblemList_parser_;

  protected:
  struct v_state_descr_
  {
    void (::jGroupType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool id;
    bool name;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class CategoryType_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (unsigned long);

  virtual void
  name (const ::std::string&);

  // Elements.
  //
  virtual void
  PropertyList (::PropertyListType*);

  virtual void
  Description (const ::std::string&);

  virtual void
  Category (::CategoryType*);

  virtual void
  jGroup (::jGroupType*);

  virtual ::CategoryType*
  post_CategoryType () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::non_negative_integer_pskel& /* id */,
           ::xml_schema::string_pskel& /* name */,
           ::PropertyListType_pskel& /* PropertyList */,
           ::xml_schema::string_pskel& /* Description */,
           ::CategoryType_pskel& /* Category */,
           ::jGroupType_pskel& /* jGroup */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::non_negative_integer_pskel&);

  void
  name_parser (::xml_schema::string_pskel&);

  // Individual element parsers.
  //
  void
  PropertyList_parser (::PropertyListType_pskel&);

  void
  Description_parser (::xml_schema::string_pskel&);

  void
  Category_parser (::CategoryType_pskel&);

  void
  jGroup_parser (::jGroupType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  CategoryType_pskel ();

  // Implementation details.
  //
  protected:
  CategoryType_pskel* CategoryType_impl_;
  CategoryType_pskel (CategoryType_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::non_negative_integer_pskel* id_parser_;
  ::xml_schema::string_pskel* name_parser_;
  ::PropertyListType_pskel* PropertyList_parser_;
  ::xml_schema::string_pskel* Description_parser_;
  ::CategoryType_pskel* Category_parser_;
  ::jGroupType_pskel* jGroup_parser_;

  protected:
  struct v_state_descr_
  {
    void (::CategoryType_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool id;
    bool name;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class SourceRef_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  qnameref (const ::std::string&);

  virtual ::SourceRef
  post_SourceRef () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::idref_pskel& /* qnameref */);

  // Individual attribute parsers.
  //
  void
  qnameref_parser (::xml_schema::idref_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  SourceRef_pskel ();

  // Implementation details.
  //
  protected:
  SourceRef_pskel* SourceRef_impl_;
  SourceRef_pskel (SourceRef_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::idref_pskel* qnameref_parser_;
};

class SourceList_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  SourceRef (const ::SourceRef&);

  virtual ::SourceList*
  post_SourceList () = 0;

  // Parser construction API.
  //
  void
  parsers (::SourceRef_pskel& /* SourceRef */);

  // Individual element parsers.
  //
  void
  SourceRef_parser (::SourceRef_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  SourceList_pskel ();

  // Implementation details.
  //
  protected:
  SourceList_pskel* SourceList_impl_;
  SourceList_pskel (SourceList_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::SourceRef_pskel* SourceRef_parser_;

  protected:
  struct v_state_descr_
  {
    void (::SourceList_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class jProposalRef_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  qnameref (const ::std::string&);

  virtual ::jProposalRef
  post_jProposalRef () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::idref_pskel& /* qnameref */);

  // Individual attribute parsers.
  //
  void
  qnameref_parser (::xml_schema::idref_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  jProposalRef_pskel ();

  // Implementation details.
  //
  protected:
  jProposalRef_pskel* jProposalRef_impl_;
  jProposalRef_pskel (jProposalRef_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::idref_pskel* qnameref_parser_;

  protected:
  struct v_state_attr_
  {
    bool qnameref;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class jProposal_pskel: public ::jProposalType_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  jProposalRef (const ::jProposalRef&);

  virtual ::jProposal*
  post_jProposal () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::boolean_pskel& /* mc */,
           ::xml_schema::id_pskel& /* qname */,
           ::LabelType_pskel& /* Label */,
           ::jProposalRef_pskel& /* jProposalRef */);

  // Individual element parsers.
  //
  void
  jProposalRef_parser (::jProposalRef_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  jProposal_pskel (::jProposalType_pskel* tiein);

  // Implementation details.
  //
  virtual ::jProposalType*
  post_jProposalType ();

  protected:
  jProposal_pskel* jProposal_impl_;
  jProposal_pskel (jProposal_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::jProposalRef_pskel* jProposalRef_parser_;

  protected:
  struct v_state_descr_
  {
    void (::jProposal_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class jProblemList_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  jProblem (::jProblem*);

  virtual ::jProblemList*
  post_jProblemList () = 0;

  // Parser construction API.
  //
  void
  parsers (::jProblem_pskel& /* jProblem */);

  // Individual element parsers.
  //
  void
  jProblem_parser (::jProblem_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  jProblemList_pskel ();

  // Implementation details.
  //
  protected:
  jProblemList_pskel* jProblemList_impl_;
  jProblemList_pskel (jProblemList_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::jProblem_pskel* jProblem_parser_;

  protected:
  struct v_state_descr_
  {
    void (::jProblemList_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class kmx_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  name (const ::std::string&);

  virtual void
  version (const ::std::string&);

  // Elements.
  //
  virtual void
  References (::References*);

  virtual void
  Content (::Content*);

  virtual ::kmx*
  post_kmx () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* name */,
           ::xml_schema::string_pskel& /* version */,
           ::References_pskel& /* References */,
           ::Content_pskel& /* Content */);

  // Individual attribute parsers.
  //
  void
  name_parser (::xml_schema::string_pskel&);

  void
  version_parser (::xml_schema::string_pskel&);

  // Individual element parsers.
  //
  void
  References_parser (::References_pskel&);

  void
  Content_parser (::Content_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  kmx_pskel ();

  // Implementation details.
  //
  protected:
  kmx_pskel* kmx_impl_;
  kmx_pskel (kmx_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* name_parser_;
  ::xml_schema::string_pskel* version_parser_;
  ::References_pskel* References_parser_;
  ::Content_pskel* Content_parser_;

  protected:
  struct v_state_descr_
  {
    void (::kmx_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool name;
    bool version;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class Solution_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  idref (unsigned int);

  virtual ::Solution
  post_Solution () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::unsigned_int_pskel& /* idref */);

  // Individual attribute parsers.
  //
  void
  idref_parser (::xml_schema::unsigned_int_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  Solution_pskel ();

  // Implementation details.
  //
  protected:
  Solution_pskel* Solution_impl_;
  Solution_pskel (Solution_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::unsigned_int_pskel* idref_parser_;
};

class jProblem_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  id (unsigned int);

  // Elements.
  //
  virtual void
  PropertyList (::PropertyListType*);

  virtual void
  Text (const ::std::string&);

  virtual void
  Solution (const ::Solution&);

  virtual ::jProblem*
  post_jProblem () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::unsigned_int_pskel& /* id */,
           ::PropertyListType_pskel& /* PropertyList */,
           ::xml_schema::string_pskel& /* Text */,
           ::Solution_pskel& /* Solution */);

  // Individual attribute parsers.
  //
  void
  id_parser (::xml_schema::unsigned_int_pskel&);

  // Individual element parsers.
  //
  void
  PropertyList_parser (::PropertyListType_pskel&);

  void
  Text_parser (::xml_schema::string_pskel&);

  void
  Solution_parser (::Solution_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  jProblem_pskel ();

  // Implementation details.
  //
  protected:
  jProblem_pskel* jProblem_impl_;
  jProblem_pskel (jProblem_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::unsigned_int_pskel* id_parser_;
  ::PropertyListType_pskel* PropertyList_parser_;
  ::xml_schema::string_pskel* Text_parser_;
  ::Solution_pskel* Solution_parser_;

  protected:
  struct v_state_descr_
  {
    void (::jProblem_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool id;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class References_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  RefSourceList (::RefSourceList*);

  virtual void
  RefProposalTypeList (::RefProposalTypeList*);

  virtual ::References*
  post_References () = 0;

  // Parser construction API.
  //
  void
  parsers (::RefSourceList_pskel& /* RefSourceList */,
           ::RefProposalTypeList_pskel& /* RefProposalTypeList */);

  // Individual element parsers.
  //
  void
  RefSourceList_parser (::RefSourceList_pskel&);

  void
  RefProposalTypeList_parser (::RefProposalTypeList_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  References_pskel ();

  // Implementation details.
  //
  protected:
  References_pskel* References_impl_;
  References_pskel (References_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::RefSourceList_pskel* RefSourceList_parser_;
  ::RefProposalTypeList_pskel* RefProposalTypeList_parser_;

  protected:
  struct v_state_descr_
  {
    void (::References_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class Content_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  Category (::CategoryType*);

  virtual ::Content*
  post_Content () = 0;

  // Parser construction API.
  //
  void
  parsers (::CategoryType_pskel& /* Category */);

  // Individual element parsers.
  //
  void
  Category_parser (::CategoryType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  Content_pskel ();

  // Implementation details.
  //
  protected:
  Content_pskel* Content_impl_;
  Content_pskel (Content_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::CategoryType_pskel* Category_parser_;

  protected:
  struct v_state_descr_
  {
    void (::Content_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class RefSourceList_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  Source (::Source*);

  virtual ::RefSourceList*
  post_RefSourceList () = 0;

  // Parser construction API.
  //
  void
  parsers (::Source_pskel& /* Source */);

  // Individual element parsers.
  //
  void
  Source_parser (::Source_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  RefSourceList_pskel ();

  // Implementation details.
  //
  protected:
  RefSourceList_pskel* RefSourceList_impl_;
  RefSourceList_pskel (RefSourceList_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::Source_pskel* Source_parser_;

  protected:
  struct v_state_descr_
  {
    void (::RefSourceList_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class RefProposalTypeList_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  jProposalList (::jProposalList*);

  virtual ::RefProposalTypeList*
  post_RefProposalTypeList () = 0;

  // Parser construction API.
  //
  void
  parsers (::jProposalList_pskel& /* jProposalList */);

  // Individual element parsers.
  //
  void
  jProposalList_parser (::jProposalList_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  RefProposalTypeList_pskel ();

  // Implementation details.
  //
  protected:
  RefProposalTypeList_pskel* RefProposalTypeList_impl_;
  RefProposalTypeList_pskel (RefProposalTypeList_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::jProposalList_pskel* jProposalList_parser_;

  protected:
  struct v_state_descr_
  {
    void (::RefProposalTypeList_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class Source_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  qname (const ::std::string&);

  virtual void
  uri (const ::std::string&);

  // Elements.
  //
  virtual void
  PropertyList (::PropertyListType*);

  virtual ::Source*
  post_Source () = 0;

  // Parser construction API.
  //
  void
  parsers (::xml_schema::id_pskel& /* qname */,
           ::xml_schema::uri_pskel& /* uri */,
           ::PropertyListType_pskel& /* PropertyList */);

  // Individual attribute parsers.
  //
  void
  qname_parser (::xml_schema::id_pskel&);

  void
  uri_parser (::xml_schema::uri_pskel&);

  // Individual element parsers.
  //
  void
  PropertyList_parser (::PropertyListType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  Source_pskel ();

  // Implementation details.
  //
  protected:
  Source_pskel* Source_impl_;
  Source_pskel (Source_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::id_pskel* qname_parser_;
  ::xml_schema::uri_pskel* uri_parser_;
  ::PropertyListType_pskel* PropertyList_parser_;

  protected:
  struct v_state_descr_
  {
    void (::Source_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);

  protected:
  struct v_state_attr_
  {
    bool qname;
    bool uri;
  };

  v_state_attr_ v_state_attr_first_;
  ::xsde::cxx::stack v_state_attr_stack_;

  virtual void
  _pre_a_validate ();

  virtual void
  _post_a_validate ();
};

class jProposalList_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  jProposal (::jProposalType*);

  virtual ::jProposalList*
  post_jProposalList () = 0;

  // Parser construction API.
  //
  void
  parsers (::jProposalType_pskel& /* jProposal */);

  // Individual element parsers.
  //
  void
  jProposal_parser (::jProposalType_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  jProposalList_pskel ();

  // Implementation details.
  //
  protected:
  jProposalList_pskel* jProposalList_impl_;
  jProposalList_pskel (jProposalList_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::jProposalType_pskel* jProposal_parser_;

  protected:
  struct v_state_descr_
  {
    void (::jProposalList_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

#include "kmodel2-pskel.ixx"

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // KMODEL2_PSKEL_HXX
