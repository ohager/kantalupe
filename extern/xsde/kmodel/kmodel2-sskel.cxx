// Copyright (C) 2005-2009 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "kmodel2-sskel.hxx"

#include <assert.h>

// LabelType_sskel
//

void LabelType_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->id_serializer_)
    this->id_serializer_->_reset ();
}

void LabelType_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// Property_sskel
//

void Property_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->key_serializer_)
    this->key_serializer_->_reset ();

  if (this->value_serializer_)
    this->value_serializer_->_reset ();
}

void Property_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// PropertyListType_sskel
//

bool PropertyListType_sskel::
Property_next ()
{
  return this->PropertyListType_impl_ ? this->PropertyListType_impl_->Property_next () : false;
}

void PropertyListType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->Property_serializer_)
    this->Property_serializer_->_reset ();

  this->resetting_ = false;
}

// jProposalType_sskel
//

bool jProposalType_sskel::
Label_next ()
{
  return this->jProposalType_impl_ ? this->jProposalType_impl_->Label_next () : false;
}

void jProposalType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->mc_serializer_)
    this->mc_serializer_->_reset ();

  if (this->qname_serializer_)
    this->qname_serializer_->_reset ();

  this->resetting_ = true;

  if (this->Label_serializer_)
    this->Label_serializer_->_reset ();

  this->resetting_ = false;
}

// Image_sskel
//

void Image_sskel::
_reset ()
{
  typedef ::xml_schema::string_sskel base;
  base::_reset ();

  if (this->id_serializer_)
    this->id_serializer_->_reset ();

  if (this->uri_serializer_)
    this->uri_serializer_->_reset ();
}

void Image_sskel::
pre (const ::std::string& x)
{
  assert (this->string_impl_);
  this->string_impl_->pre (x);
}

// ImageListType_sskel
//

bool ImageListType_sskel::
Image_next ()
{
  return this->ImageListType_impl_ ? this->ImageListType_impl_->Image_next () : false;
}

void ImageListType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->Image_serializer_)
    this->Image_serializer_->_reset ();

  this->resetting_ = false;
}

// jGroupType_sskel
//

bool jGroupType_sskel::
SourceList_present ()
{
  return this->jGroupType_impl_ ? this->jGroupType_impl_->SourceList_present () : false;
}

void jGroupType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->id_serializer_)
    this->id_serializer_->_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  this->resetting_ = true;

  if (this->PropertyList_serializer_)
    this->PropertyList_serializer_->_reset ();

  if (this->SourceList_serializer_)
    this->SourceList_serializer_->_reset ();

  if (this->Description_serializer_)
    this->Description_serializer_->_reset ();

  if (this->ImageList_serializer_)
    this->ImageList_serializer_->_reset ();

  if (this->Text_serializer_)
    this->Text_serializer_->_reset ();

  if (this->Hint_serializer_)
    this->Hint_serializer_->_reset ();

  if (this->jProposal_serializer_)
    this->jProposal_serializer_->_reset ();

  if (this->jProblemList_serializer_)
    this->jProblemList_serializer_->_reset ();

  this->resetting_ = false;
}

// CategoryType_sskel
//

bool CategoryType_sskel::
Category_next ()
{
  return this->CategoryType_impl_ ? this->CategoryType_impl_->Category_next () : false;
}

bool CategoryType_sskel::
jGroup_next ()
{
  return this->CategoryType_impl_ ? this->CategoryType_impl_->jGroup_next () : false;
}

void CategoryType_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->id_serializer_)
    this->id_serializer_->_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  this->resetting_ = true;

  if (this->PropertyList_serializer_)
    this->PropertyList_serializer_->_reset ();

  if (this->Description_serializer_)
    this->Description_serializer_->_reset ();

  if (this->Category_serializer_)
    this->Category_serializer_->_reset ();

  if (this->jGroup_serializer_)
    this->jGroup_serializer_->_reset ();

  this->resetting_ = false;
}

// SourceRef_sskel
//

bool SourceRef_sskel::
qnameref_present ()
{
  return this->SourceRef_impl_ ? this->SourceRef_impl_->qnameref_present () : false;
}

void SourceRef_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->qnameref_serializer_)
    this->qnameref_serializer_->_reset ();
}

// SourceList_sskel
//

void SourceList_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->SourceRef_serializer_)
    this->SourceRef_serializer_->_reset ();

  this->resetting_ = false;
}

// jProposalRef_sskel
//

void jProposalRef_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->qnameref_serializer_)
    this->qnameref_serializer_->_reset ();
}

// jProposal_sskel
//

bool jProposal_sskel::
jProposalRef_present ()
{
  return this->jProposal_impl_ ? this->jProposal_impl_->jProposalRef_present () : false;
}

void jProposal_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::jProposalType_sskel base;
  base::_reset ();

  this->resetting_ = true;

  if (this->jProposalRef_serializer_)
    this->jProposalRef_serializer_->_reset ();

  this->resetting_ = false;
}

void jProposal_sskel::
pre (const ::jProposalType& x)
{
  assert (this->jProposalType_impl_);
  this->jProposalType_impl_->pre (x);
}

bool jProposal_sskel::
mc ()
{
  assert (this->jProposalType_impl_);
  return this->jProposalType_impl_->mc ();
}

::std::string jProposal_sskel::
qname ()
{
  assert (this->jProposalType_impl_);
  return this->jProposalType_impl_->qname ();
}

const ::LabelType& jProposal_sskel::
Label ()
{
  assert (this->jProposalType_impl_);
  return this->jProposalType_impl_->Label ();
}

// jProblemList_sskel
//

void jProblemList_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->jProblem_serializer_)
    this->jProblem_serializer_->_reset ();

  this->resetting_ = false;
}

// kmx_sskel
//

void kmx_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->name_serializer_)
    this->name_serializer_->_reset ();

  if (this->version_serializer_)
    this->version_serializer_->_reset ();

  this->resetting_ = true;

  if (this->References_serializer_)
    this->References_serializer_->_reset ();

  if (this->Content_serializer_)
    this->Content_serializer_->_reset ();

  this->resetting_ = false;
}

// Solution_sskel
//

bool Solution_sskel::
idref_present ()
{
  return this->Solution_impl_ ? this->Solution_impl_->idref_present () : false;
}

void Solution_sskel::
_reset ()
{
  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->idref_serializer_)
    this->idref_serializer_->_reset ();
}

// jProblem_sskel
//

void jProblem_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->id_serializer_)
    this->id_serializer_->_reset ();

  this->resetting_ = true;

  if (this->PropertyList_serializer_)
    this->PropertyList_serializer_->_reset ();

  if (this->Text_serializer_)
    this->Text_serializer_->_reset ();

  if (this->Solution_serializer_)
    this->Solution_serializer_->_reset ();

  this->resetting_ = false;
}

// References_sskel
//

void References_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->RefSourceList_serializer_)
    this->RefSourceList_serializer_->_reset ();

  if (this->RefProposalTypeList_serializer_)
    this->RefProposalTypeList_serializer_->_reset ();

  this->resetting_ = false;
}

// Content_sskel
//

void Content_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->Category_serializer_)
    this->Category_serializer_->_reset ();

  this->resetting_ = false;
}

// RefSourceList_sskel
//

bool RefSourceList_sskel::
Source_next ()
{
  return this->RefSourceList_impl_ ? this->RefSourceList_impl_->Source_next () : false;
}

void RefSourceList_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->Source_serializer_)
    this->Source_serializer_->_reset ();

  this->resetting_ = false;
}

// RefProposalTypeList_sskel
//

void RefProposalTypeList_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->jProposalList_serializer_)
    this->jProposalList_serializer_->_reset ();

  this->resetting_ = false;
}

// Source_sskel
//

void Source_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  if (this->qname_serializer_)
    this->qname_serializer_->_reset ();

  if (this->uri_serializer_)
    this->uri_serializer_->_reset ();

  this->resetting_ = true;

  if (this->PropertyList_serializer_)
    this->PropertyList_serializer_->_reset ();

  this->resetting_ = false;
}

// jProposalList_sskel
//

bool jProposalList_sskel::
jProposal_next ()
{
  return this->jProposalList_impl_ ? this->jProposalList_impl_->jProposal_next () : false;
}

void jProposalList_sskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::serializer::validating::complex_content base;
  base::_reset ();

  this->resetting_ = true;

  if (this->jProposal_serializer_)
    this->jProposal_serializer_->_reset ();

  this->resetting_ = false;
}

// Element validation and serialization for PropertyListType_sskel.
//
void PropertyListType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // Property
  //
  while (this->Property_next ())
  {
    const ::Property& r = this->Property ();

    if (this->Property_serializer_)
    {
      this->Property_serializer_->pre (r);
      this->_start_element ("Property");
      this->Property_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Property_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Property_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Property_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Property_serializer_->post ();
    }
  }
}

// Element validation and serialization for jProposalType_sskel.
//
void jProposalType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // Label
  //
  while (this->Label_next ())
  {
    const ::LabelType& r = this->Label ();

    if (this->Label_serializer_)
    {
      this->Label_serializer_->pre (r);
      this->_start_element ("Label");
      this->Label_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Label_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Label_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Label_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Label_serializer_->post ();
    }
  }
}

// Element validation and serialization for ImageListType_sskel.
//
void ImageListType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // Image
  //
  while (this->Image_next ())
  {
    const ::Image& r = this->Image ();

    if (this->Image_serializer_)
    {
      this->Image_serializer_->pre (r);
      this->_start_element ("Image");
      this->Image_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Image_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Image_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Image_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Image_serializer_->post ();
    }
  }
}

// Element validation and serialization for jGroupType_sskel.
//
void jGroupType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // PropertyList
  //
  {
    const ::PropertyListType& r = this->PropertyList ();

    if (this->PropertyList_serializer_)
    {
      this->PropertyList_serializer_->pre (r);
      this->_start_element ("PropertyList");
      this->PropertyList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->PropertyList_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // SourceList
  //
  if (this->SourceList_present ())
  {
    const ::SourceList& r = this->SourceList ();

    if (this->SourceList_serializer_)
    {
      this->SourceList_serializer_->pre (r);
      this->_start_element ("SourceList");
      this->SourceList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->SourceList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->SourceList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->SourceList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->SourceList_serializer_->post ();
    }
  }

  // Description
  //
  {
    const ::std::string& r = this->Description ();

    if (this->Description_serializer_)
    {
      this->Description_serializer_->pre (r);
      this->_start_element ("Description");
      this->Description_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Description_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Description_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Description_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Description_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // ImageList
  //
  {
    const ::ImageListType& r = this->ImageList ();

    if (this->ImageList_serializer_)
    {
      this->ImageList_serializer_->pre (r);
      this->_start_element ("ImageList");
      this->ImageList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->ImageList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->ImageList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->ImageList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->ImageList_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // Text
  //
  {
    const ::std::string& r = this->Text ();

    if (this->Text_serializer_)
    {
      this->Text_serializer_->pre (r);
      this->_start_element ("Text");
      this->Text_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Text_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Text_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Text_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Text_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // Hint
  //
  {
    const ::std::string& r = this->Hint ();

    if (this->Hint_serializer_)
    {
      this->Hint_serializer_->pre (r);
      this->_start_element ("Hint");
      this->Hint_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Hint_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Hint_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Hint_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Hint_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // jProposal
  //
  {
    const ::jProposal& r = this->jProposal ();

    if (this->jProposal_serializer_)
    {
      this->jProposal_serializer_->pre (r);
      this->_start_element ("jProposal");
      this->jProposal_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->jProposal_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->jProposal_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->jProposal_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->jProposal_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // jProblemList
  //
  {
    const ::jProblemList& r = this->jProblemList ();

    if (this->jProblemList_serializer_)
    {
      this->jProblemList_serializer_->pre (r);
      this->_start_element ("jProblemList");
      this->jProblemList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->jProblemList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->jProblemList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->jProblemList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->jProblemList_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for CategoryType_sskel.
//
void CategoryType_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // PropertyList
  //
  {
    const ::PropertyListType& r = this->PropertyList ();

    if (this->PropertyList_serializer_)
    {
      this->PropertyList_serializer_->pre (r);
      this->_start_element ("PropertyList");
      this->PropertyList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->PropertyList_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // Description
  //
  {
    const ::std::string& r = this->Description ();

    if (this->Description_serializer_)
    {
      this->Description_serializer_->pre (r);
      this->_start_element ("Description");
      this->Description_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Description_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Description_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Description_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Description_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // Category
  //
  while (this->Category_next ())
  {
    const ::CategoryType& r = this->Category ();

    if (this->Category_serializer_)
    {
      this->Category_serializer_->pre (r);
      this->_start_element ("Category");
      this->Category_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Category_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Category_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Category_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Category_serializer_->post ();
    }
  }

  // jGroup
  //
  while (this->jGroup_next ())
  {
    const ::jGroupType& r = this->jGroup ();

    if (this->jGroup_serializer_)
    {
      this->jGroup_serializer_->pre (r);
      this->_start_element ("jGroup");
      this->jGroup_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->jGroup_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->jGroup_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->jGroup_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->jGroup_serializer_->post ();
    }
  }
}

// Element validation and serialization for SourceList_sskel.
//
void SourceList_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // SourceRef
  //
  {
    size_t i = 0;
    for (; this->SourceRef_next (); ++i)
    {
      const ::SourceRef& r = this->SourceRef ();

      if (this->SourceRef_serializer_)
      {
        this->SourceRef_serializer_->pre (r);
        this->_start_element ("SourceRef");
        this->SourceRef_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->SourceRef_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->SourceRef_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->SourceRef_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->SourceRef_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for jProposal_sskel.
//
void jProposal_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::jProposalType_sskel base;
  base::_serialize_content ();

  if (ctx.error_type ())
    return;

  // jProposalRef
  //
  if (this->jProposalRef_present ())
  {
    const ::jProposalRef& r = this->jProposalRef ();

    if (this->jProposalRef_serializer_)
    {
      this->jProposalRef_serializer_->pre (r);
      this->_start_element ("jProposalRef");
      this->jProposalRef_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->jProposalRef_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->jProposalRef_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->jProposalRef_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->jProposalRef_serializer_->post ();
    }
  }
}

// Element validation and serialization for jProblemList_sskel.
//
void jProblemList_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // jProblem
  //
  {
    size_t i = 0;
    for (; this->jProblem_next (); ++i)
    {
      const ::jProblem& r = this->jProblem ();

      if (this->jProblem_serializer_)
      {
        this->jProblem_serializer_->pre (r);
        this->_start_element ("jProblem");
        this->jProblem_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->jProblem_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->jProblem_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->jProblem_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->jProblem_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for kmx_sskel.
//
void kmx_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // References
  //
  {
    const ::References& r = this->References ();

    if (this->References_serializer_)
    {
      this->References_serializer_->pre (r);
      this->_start_element ("References");
      this->References_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->References_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->References_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->References_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->References_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // Content
  //
  {
    const ::Content& r = this->Content ();

    if (this->Content_serializer_)
    {
      this->Content_serializer_->pre (r);
      this->_start_element ("Content");
      this->Content_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Content_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Content_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Content_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Content_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for jProblem_sskel.
//
void jProblem_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // PropertyList
  //
  {
    const ::PropertyListType& r = this->PropertyList ();

    if (this->PropertyList_serializer_)
    {
      this->PropertyList_serializer_->pre (r);
      this->_start_element ("PropertyList");
      this->PropertyList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->PropertyList_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // Text
  //
  {
    const ::std::string& r = this->Text ();

    if (this->Text_serializer_)
    {
      this->Text_serializer_->pre (r);
      this->_start_element ("Text");
      this->Text_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Text_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Text_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Text_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Text_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // Solution
  //
  {
    size_t i = 0;
    for (; this->Solution_next (); ++i)
    {
      const ::Solution& r = this->Solution ();

      if (this->Solution_serializer_)
      {
        this->Solution_serializer_->pre (r);
        this->_start_element ("Solution");
        this->Solution_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Solution_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Solution_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Solution_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Solution_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for References_sskel.
//
void References_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // RefSourceList
  //
  {
    const ::RefSourceList& r = this->RefSourceList ();

    if (this->RefSourceList_serializer_)
    {
      this->RefSourceList_serializer_->pre (r);
      this->_start_element ("RefSourceList");
      this->RefSourceList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->RefSourceList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->RefSourceList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->RefSourceList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->RefSourceList_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }

  // RefProposalTypeList
  //
  {
    const ::RefProposalTypeList& r = this->RefProposalTypeList ();

    if (this->RefProposalTypeList_serializer_)
    {
      this->RefProposalTypeList_serializer_->pre (r);
      this->_start_element ("RefProposalTypeList");
      this->RefProposalTypeList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->RefProposalTypeList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->RefProposalTypeList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->RefProposalTypeList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->RefProposalTypeList_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for Content_sskel.
//
void Content_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // Category
  //
  {
    size_t i = 0;
    for (; this->Category_next (); ++i)
    {
      const ::CategoryType& r = this->Category ();

      if (this->Category_serializer_)
      {
        this->Category_serializer_->pre (r);
        this->_start_element ("Category");
        this->Category_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Category_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Category_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Category_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Category_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    if (i < 1UL)
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for RefSourceList_sskel.
//
void RefSourceList_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // Source
  //
  while (this->Source_next ())
  {
    const ::Source& r = this->Source ();

    if (this->Source_serializer_)
    {
      this->Source_serializer_->pre (r);
      this->_start_element ("Source");
      this->Source_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->Source_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->Source_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->Source_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->Source_serializer_->post ();
    }
  }
}

// Element validation and serialization for RefProposalTypeList_sskel.
//
void RefProposalTypeList_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // jProposalList
  //
  {
    const ::jProposalList& r = this->jProposalList ();

    if (this->jProposalList_serializer_)
    {
      this->jProposalList_serializer_->pre (r);
      this->_start_element ("jProposalList");
      this->jProposalList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->jProposalList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->jProposalList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->jProposalList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->jProposalList_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for Source_sskel.
//
void Source_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // PropertyList
  //
  {
    const ::PropertyListType& r = this->PropertyList ();

    if (this->PropertyList_serializer_)
    {
      this->PropertyList_serializer_->pre (r);
      this->_start_element ("PropertyList");
      this->PropertyList_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->PropertyList_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->PropertyList_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_element);
      return;
    }
  }
}

// Element validation and serialization for jProposalList_sskel.
//
void jProposalList_sskel::
_serialize_content ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // jProposal
  //
  while (this->jProposal_next ())
  {
    const ::jProposalType& r = this->jProposal ();

    if (this->jProposal_serializer_)
    {
      this->jProposal_serializer_->pre (r);
      this->_start_element ("jProposal");
      this->jProposal_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->jProposal_serializer_->_serialize_attributes ();

      if (ctx.error_type ())
        return;

      this->jProposal_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->jProposal_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_element ();
      this->jProposal_serializer_->post ();
    }
  }
}

// Attribute validation and serialization for LabelType_sskel.
//
void LabelType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // id
  //
  {
    unsigned int r = this->id ();

    if (this->id_serializer_)
    {
      this->id_serializer_->pre (r);
      this->_start_attribute ("id");
      this->id_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->id_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->id_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->id_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for Property_sskel.
//
void Property_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // key
  //
  {
    const ::std::string& r = this->key ();

    if (this->key_serializer_)
    {
      this->key_serializer_->pre (r);
      this->_start_attribute ("key");
      this->key_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->key_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->key_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->key_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // value
  //
  {
    const ::std::string& r = this->value ();

    if (this->value_serializer_)
    {
      this->value_serializer_->pre (r);
      this->_start_attribute ("value");
      this->value_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->value_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->value_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->value_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for jProposalType_sskel.
//
void jProposalType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // mc
  //
  {
    bool r = this->mc ();

    if (this->mc_serializer_)
    {
      this->mc_serializer_->pre (r);
      this->_start_attribute ("mc");
      this->mc_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->mc_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->mc_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->mc_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // qname
  //
  {
    const ::std::string& r = this->qname ();

    if (this->qname_serializer_)
    {
      this->qname_serializer_->pre (r);
      this->_start_attribute ("qname");
      this->qname_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->qname_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->qname_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->qname_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for Image_sskel.
//
void Image_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  typedef ::xml_schema::string_sskel base;
  base::_serialize_attributes ();

  if (ctx.error_type ())
    return;

  // id
  //
  {
    unsigned int r = this->id ();

    if (this->id_serializer_)
    {
      this->id_serializer_->pre (r);
      this->_start_attribute ("id");
      this->id_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->id_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->id_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->id_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // uri
  //
  {
    const ::std::string& r = this->uri ();

    if (this->uri_serializer_)
    {
      this->uri_serializer_->pre (r);
      this->_start_attribute ("uri");
      this->uri_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->uri_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->uri_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->uri_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for jGroupType_sskel.
//
void jGroupType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // id
  //
  {
    unsigned int r = this->id ();

    if (this->id_serializer_)
    {
      this->id_serializer_->pre (r);
      this->_start_attribute ("id");
      this->id_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->id_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->id_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->id_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // name
  //
  {
    const ::std::string& r = this->name ();

    if (this->name_serializer_)
    {
      this->name_serializer_->pre (r);
      this->_start_attribute ("name");
      this->name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->name_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for CategoryType_sskel.
//
void CategoryType_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // id
  //
  {
    unsigned long r = this->id ();

    if (this->id_serializer_)
    {
      this->id_serializer_->pre (r);
      this->_start_attribute ("id");
      this->id_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->id_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->id_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->id_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // name
  //
  {
    const ::std::string& r = this->name ();

    if (this->name_serializer_)
    {
      this->name_serializer_->pre (r);
      this->_start_attribute ("name");
      this->name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->name_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for SourceRef_sskel.
//
void SourceRef_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // qnameref
  //
  if (this->qnameref_present ())
  {
    const ::std::string& r = this->qnameref ();

    if (this->qnameref_serializer_)
    {
      this->qnameref_serializer_->pre (r);
      this->_start_attribute ("qnameref");
      this->qnameref_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->qnameref_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->qnameref_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->qnameref_serializer_->post ();
    }
  }
}

// Attribute validation and serialization for jProposalRef_sskel.
//
void jProposalRef_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // qnameref
  //
  {
    const ::std::string& r = this->qnameref ();

    if (this->qnameref_serializer_)
    {
      this->qnameref_serializer_->pre (r);
      this->_start_attribute ("qnameref");
      this->qnameref_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->qnameref_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->qnameref_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->qnameref_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for kmx_sskel.
//
void kmx_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // name
  //
  {
    const ::std::string& r = this->name ();

    if (this->name_serializer_)
    {
      this->name_serializer_->pre (r);
      this->_start_attribute ("name");
      this->name_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->name_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->name_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->name_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // version
  //
  {
    const ::std::string& r = this->version ();

    if (this->version_serializer_)
    {
      this->version_serializer_->pre (r);
      this->_start_attribute ("version");
      this->version_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->version_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->version_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->version_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for Solution_sskel.
//
void Solution_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // idref
  //
  if (this->idref_present ())
  {
    unsigned int r = this->idref ();

    if (this->idref_serializer_)
    {
      this->idref_serializer_->pre (r);
      this->_start_attribute ("idref");
      this->idref_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->idref_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->idref_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->idref_serializer_->post ();
    }
  }
}

// Attribute validation and serialization for jProblem_sskel.
//
void jProblem_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // id
  //
  {
    unsigned int r = this->id ();

    if (this->id_serializer_)
    {
      this->id_serializer_->pre (r);
      this->_start_attribute ("id");
      this->id_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->id_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->id_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->id_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Attribute validation and serialization for Source_sskel.
//
void Source_sskel::
_serialize_attributes ()
{
  ::xsde::cxx::serializer::context& ctx = this->_context ();

  // qname
  //
  {
    const ::std::string& r = this->qname ();

    if (this->qname_serializer_)
    {
      this->qname_serializer_->pre (r);
      this->_start_attribute ("qname");
      this->qname_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->qname_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->qname_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->qname_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }

  // uri
  //
  {
    const ::std::string& r = this->uri ();

    if (this->uri_serializer_)
    {
      this->uri_serializer_->pre (r);
      this->_start_attribute ("uri");
      this->uri_serializer_->_pre_impl (ctx);

      if (ctx.error_type ())
        return;

      this->uri_serializer_->_serialize_content ();

      if (ctx.error_type ())
        return;

      this->uri_serializer_->_post_impl ();

      if (ctx.error_type ())
        return;

      this->_end_attribute ();
      this->uri_serializer_->post ();
    }
    else
    {
      this->_schema_error (::xsde::cxx::schema_error::expected_attribute);
      return;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

